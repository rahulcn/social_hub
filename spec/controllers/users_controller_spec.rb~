require 'spec_helper'

describe UsersController do

  render_views
  
  describe "GET 'index'" do
  
   
    
    describe "for non-signed-in users" do
      it "should deny access" do
      	get :index
      	response.should redirect_to(signin_path)
      	flash[:notice].should =~ /sign in/i
      end
    end
    
  end
 
  describe "GET 'show'" do
  
    before(:each) do
      @user = Factory(:user)
      User.stub!(:find, @user.id).and_return(@user)
    end

    it "should be successful" do
      get :show, :id => @user
      response.should be_success
    end
    
    it "should have the right title" do
      get :show, :id => @user
      response.should have_selector("title", :content => @user.name)
    end

    it "should include the user's name" do
      get :show, :id => @user
      response.should have_selector("h1", :content => @user.name)
    end

    it "should have a profile image" do
      get :show, :id => @user
      response.should have_selector("h1>img", :class => "gravatar")
    end
    
    it "should show the users microposts" do
      mp1 = Factory(:micropost, :user => @user, :content => "Foo bar")
      mp2 = Factory(:micropost, :user => @user, :content => "baz quux")
      get :show, :id => @user	
      respond.should have_selector('span.content', :content => mp1.content)
      respond.should have_selector('span.content', :content => mp2.content)
    end
  end
  
  describe "GET 'new'" do
  
    it "should be successful" do
      get :new
      response.should be_success
    end
    
    it "should have a right title" do
      get :new
      response.should have_selector('title', :content => "Sign up")
    end
  end
  
  describe "POST 'create'" do
  
    describe "failure" do
    
      before(:each) do
        @attr = { :name => "", :email => "", :password => "", 
                  :password_confirmation => ""}
        @user = Factory.build(:user, @attr)
        User.stub!(:new).and_return(@user)
        @user.should_receive(:save).and_return(false) 
      end   
    
      it "should have the right title" do
        post :create, :user => @attr
        response.should have_selector('title', :content => "Sign up")
      end

      it "should render the 'new' page" do
        post :create, :user => @attr
        response.should render_template('new')
      end
    end
      
    describe "success" do
        
      before(:each) do
        @attr = { :name => "New User", :email => "example@example.com", 
                  :password => "foobar", :password_confirmation => "foobar" }
        @user = Factory(:user, @attr)
        User.stub!(:new).and_return(@user)
        @user.should_receive(:save).and_return(true)
      end
              
      it "should redirect to the user show page" do
        post :create, :user => @attr
        response.should redirect_to(user_path(@user))
      end
        
      it "should have a welcome message" do
        post :create, :user => @attr
        flash[:success].should =~ /Welcome to your profile/i
      end
        
      it "should sign user in" do
        post :create, :user => @attr
        controller.should be_signed_in
      end
    end
  end 
  
  describe "GET 'edit'" do
  
    before(:each) do
     controller.stub!(:authenticate).and_return(:false)
     controller.stub!(:correct_user).and_return(:false)
      @user = Factory(:user)
      test_sign_in(@user)
    end
    
    it "should be successful" do
      get :edit, :id => @user
      response.should be_success
    end
    
    it "should have the right title" do
      get :edit, :id => @user 
      response.should have_selector('title', :content => "Edit user")   
    end
    
    it "should have a link to change the Gravatar" do
      get :edit, :id => @user
      response.should have_selector('a', :href => 'http://gravatar.com/emails',
                                         :content => "change")    
    end
  end
  
  describe "PUT 'update'" do
  
    before(:each) do
      controller.stub!(:authenticate).and_return(:false)
      controller.stub!(:correct_user).and_return(:false) 
      @user = Factory(:user)
      test_sign_in(@user)
    end
    
    describe "failure" do
    
      before(:each) do
        @attr = { :name => "", :email => "", :password => "", 
                          :password_confirmation => ""} 
      end
      
      it "should render 'edit' template" do
        put :update, :id => @user, :user => @attr
        response.should render_template('edit')       	
      end
      
      it "should have the right title" do
        put :update, :id => @user, :user => @attr
        response.should have_selector('title', :content => "Edit user")      	
      end
    end
    
    describe "success" do
      
      before(:each) do
        @attr = { :name => "New User", :email => "example@example.com", 
                  :password => "foobar", :password_confirmation => "foobar" }
      end
      
      it "should change the user's attributes'" do
      	put :update, :id => @user, :user => @attr
      	@user.reload
      	@user.name.should == @attr[:name]
      	@user.email.should == @attr[:email]
      end
      
      it "should redirect to the user's show page" do
      	put :update, :id => @user, :user => @attr
      	response.should redirect_to(user_path(@user))
      end
      
      it "should have a flash message" do
        put :update, :id => @user, :user => @attr
        flash[:success].should =~ /updated/      	
      end
    end
  end
  
  describe "authentication of edit/update actions " do
    
    before(:each) do
      @user = Factory(:user)
    end
    
    describe "for non-signed-in users" do

      it "should deny access to 'edit'" do
        get :edit, :id => @user
        response.should redirect_to(signin_path)
      end

      it "should deny access to 'update'" do
        put :update, :id => @user, :user => {}
        response.should redirect_to(signin_path)
      end
    end
    
    describe "for signed in users" do
      
      before(:each) do
        wrong_user = Factory(:user, :email => "rama@krishna.net")
        test_sign_in(wrong_user)  
      end
      
      it "should require matching user for 'edit'" do
      	get :edit, :id => @user
      	response.should redirect_to(signin_path)
      end
      
      it "should require matching user for 'update'" do
      	put :update, :id => @user, :user => {}
      	response.should redirect_to(signin_path)
      end
    end
  end
  
  describe "DELETE 'destroy'" do

    before(:each) do

      @user = Factory(:user)
    end

    describe "as a non-signed-in user" do
      it "should deny access" do
        delete :destroy, :id => @user
        response.should redirect_to(signin_path)
      end
    end

    describe "as a non-admin user" do
      it "should protect the page" do
        test_sign_in(@user)
        delete :destroy, :id => @user
        response.should redirect_to(signin_path)
      end
    end

    describe "as an admin user" do

      before(:each) do
            controller.stub!(:authenticate).and_return(:false)
            controller.stub!(:admin_user).and_return(:false)      
        admin = Factory(:user, :email => "admin@example.com", :admin => true)
        test_sign_in(admin)
      end

      it "should destroy the user" do
        lambda do
          delete :destroy, :id => @user
        end.should change(User, :count).by(-1)
      end

      it "should redirect to the users page" do
        delete :destroy, :id => @user
        response.should redirect_to(users_path)
      end
    end
  end
end












